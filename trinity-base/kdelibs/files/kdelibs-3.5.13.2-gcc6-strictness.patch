diff --git a/kjs/create_hash_table b/kjs/create_hash_table
index a7df5ed..e8103fb 100755
--- a/kjs/create_hash_table
+++ b/kjs/create_hash_table
@@ -69,7 +69,9 @@ while (<IN>) {
       my $att = $3;
       my $param = $4;
       push(@keys, $key);
-      push(@values, $val);
+      # values in HashEntry are short but can be unsigned in C++ code
+      # therefore it is necessary to force the cast in the generated files
+      push(@values, "(short)".$val);
       printf STDERR "WARNING: Number of arguments missing for $key/$val\n"
         if ( $att =~ m/Function/ && length($param) == 0);
       push(@attrs, length($att) > 0 ? $att : "0");
diff --git a/kate/part/katebuffer.cpp b/kate/part/katebuffer.cpp
index 61f81fa..66c2169 100644
--- a/kate/part/katebuffer.cpp
+++ b/kate/part/katebuffer.cpp
@@ -122,7 +122,7 @@ class KateFileLoader
           if ((c >= 2) && (m_codec->mibEnum() == 1000) && (m_buffer[1] == 0x00))
           {
             // utf16LE, we need to put the decoder in LE mode
-            char reverseUtf16[3] = {0xFF, 0xFE, 0x00};
+            char reverseUtf16[3] = {'\xFF', '\xFE', '\x00'};
             m_decoder->toUnicode(reverseUtf16, 2);
           }
 
@@ -917,7 +917,7 @@ void KateBuffer::updatePreviousNotEmptyLine(KateBufBlock *blk,uint current_line,
   } while (textLine->firstChar()==-1);
   kdDebug(13020)<<"updatePreviousNotEmptyLine: updating line:"<<(blk->startLine()+current_line)<<endl;
   TQMemArray<uint> foldingList=textLine->foldingListArray();
-  while ( (foldingList.size()>0)  && ( abs(foldingList[foldingList.size()-2])==1)) {
+  while ( (foldingList.size()>0)  && ( labs(foldingList[foldingList.size()-2])==1)) {
     foldingList.resize(foldingList.size()-2,TQGArray::SpeedOptim);
   }
   addIndentBasedFoldingInformation(foldingList,addindent,deindent);
diff --git a/kio/kio/kshred.cpp b/kio/kio/kshred.cpp
index 0bc01c2..b013e20 100644
--- a/kio/kio/kshred.cpp
+++ b/kio/kio/kshred.cpp
@@ -206,9 +206,11 @@ KShred::flush()
 bool
 KShred::shred()
 {
-  unsigned char p[6][3] = {{'\222', '\111', '\044'}, {'\111', '\044', '\222'},
-                           {'\044', '\222', '\111'}, {'\155', '\266', '\333'},
-                           {'\266', '\333', '\155'}, {'\333', '\155', '\266'}};
+  // WARNING
+  // These numbers are octal.  Do not remove the leading zeros!
+  unsigned char p[6][3] = {{0222, 0111,  044}, {0111,  044, 0222},
+                           { 044, 0222, 0111}, {0155, 0266, 0333},
+                           {0266, 0333, 0155}, {0333, 0155, 0266}};
   TQString msg = i18n("Shredding:  pass %1 of 35");

   emit processedSize(0);
diff --git a/tdeui/kdialogbase.cpp b/tdeui/kdialogbase.cpp
index e426df1..1f7fbd5 100644
--- a/kdeui/kdialogbase.cpp
+++ b/kdeui/kdialogbase.cpp
@@ -671,11 +671,11 @@ void KDialogBase::setButtonStyle( int style )
   if( style < 0 || style >= ActionStyleMAX ) { style = ActionStyle0; }
   d->mButton.style = style;
 
-  const int *layout;
+  const unsigned int *layout;
   int layoutMax = 0;
   if (mMessageBoxMode)
   {
-    static const int layoutRule[5][6] =
+    static const unsigned int layoutRule[5][6] =
     {
       {Details,Stretch,User2|Stretch,User1|Stretch,Cancel|Stretch, Details|Filler},
       {Details,Stretch,User2|Stretch,User1|Stretch,Cancel|Stretch, Details|Filler},
@@ -688,7 +688,7 @@ void KDialogBase::setButtonStyle( int style )
   }
   else if (mButtonOrientation == Qt::Horizontal)
   {
-    static const int layoutRule[5][10] =
+    static const unsigned int layoutRule[5][10] =
     {
       {Details,Help,Default,Stretch,User3,User2,User1,Ok,Apply|Try,Cancel|Close},
       {Details,Help,Default,Stretch,User3,User2,User1,Cancel|Close,Apply|Try,Ok},
@@ -701,7 +701,7 @@ void KDialogBase::setButtonStyle( int style )
   }
   else
   {
-    static const int layoutRule[5][10] =
+    static const unsigned int layoutRule[5][10] =
     {
       {Ok,Apply|Try,User1,User2,User3,Stretch,Default,Cancel|Close,Help, Details},
       //{Ok,Apply|Try,Cancel|Close,User1,User2,User3,Stretch, Default,Help, Details},
diff --git a/khtml/misc/decoder.cpp b/kdehtml/misc/decoder.cpp
index 28c8a5e..419b4a2 100644
--- a/khtml/misc/decoder.cpp
+++ b/khtml/misc/decoder.cpp
@@ -265,7 +265,7 @@ TQString Decoder::decode(const char *data, int len)
                 if (m_codec->mibEnum() == 1000 && c2 == 0x00)
                 {
                   // utf16LE, we need to put the decoder in LE mode
-                  char reverseUtf16[3] = {0xFF, 0xFE, 0x00};
+                  char reverseUtf16[3] = {'\xFF', '\xFE', '\x00'};
                   m_decoder->toUnicode(reverseUtf16, 2);
                 }
             }
